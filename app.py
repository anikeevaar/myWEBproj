# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, date, timedelta
import random
import re
import io
import pandas as pd
from sqlalchemy import func
from sqlalchemy.exc import IntegrityError

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mood_diary.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'your-secret-key-here'
db = SQLAlchemy(app)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy


# –ú–û–î–ï–õ–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•

class User(db.Model):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)  # –õ–æ–≥–∏–Ω
    password = db.Column(db.String(120), nullable=False)  # –ü–∞—Ä–æ–ª—å
    subscription = db.relationship('Subscription', backref='user', uselist=False,
                                   cascade='all, delete-orphan')  # –ü–æ–¥–ø–∏—Å–∫–∞ (1 –∫ 1)
    entries = db.relationship('DayEntry', backref='author', lazy=True)  # –ó–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class DayEntry(db.Model):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ"""
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, unique=False, nullable=False)  # –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
    mood = db.Column(db.String(20))  # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (happy, neutral, sad, angry)
    note = db.Column(db.Text)  # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    answer = db.Column(db.Text)  # –û—Ç–≤–µ—Ç –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class DailyQuestion(db.Model):
    """–ú–æ–¥–µ–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)  # –î–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    question = db.Column(db.String(255), nullable=False)  # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞


class Subscription(db.Model):
    """–ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True)  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    start_date = db.Column(db.Date)  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    end_date = db.Column(db.Date)  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    auto_renew = db.Column(db.Boolean, default=True)  # –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ


### –ö–û–ù–°–¢–ê–ù–¢–´ ###

# –°–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
DAILY_QUESTIONS = [
    "–ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–æ?",
    "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤—ã —É–∑–Ω–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?",
    "–ö–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
    "–ó–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è?",
    "–ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è?",
    "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –¥–Ω—è –±—ã–ª —Å–∞–º—ã–º –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è?",
    "–ß—Ç–æ –≤—ã –º–æ–≥–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ?",
    "–ö–æ–º—É –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–≥–ª–∏?",
    "–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è?"
]

# –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
MONTH_NAMES = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
}


# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

def validate_password(password):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    if len(password) < 8:
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.search(r"[A-Z–ê-–Ø]", password):
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r"[a-z–∞-—è]", password):
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r"\d", password):
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª"
    return None


def get_daily_question(for_date=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
    target_date = for_date if for_date else date.today()
    question = DailyQuestion.query.filter_by(date=target_date).first()

    if not question:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç - –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ
        day_of_year = target_date.timetuple().tm_yday
        selected_question = DAILY_QUESTIONS[day_of_year % len(DAILY_QUESTIONS)]
        new_question = DailyQuestion(date=target_date, question=selected_question)
        db.session.add(new_question)
        db.session.commit()
        return selected_question
    return question.question


def get_mood_name(mood_code):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    moods = {
        'happy': 'üòä –†–∞–¥–æ—Å—Ç–Ω–æ–µ',
        'neutral': 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ',
        'sad': 'üòû –ì—Ä—É—Å—Ç–Ω–æ–µ',
        'angry': 'üò† –ó–ª–æ–µ'
    }
    return moods.get(mood_code, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')


def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    subscription = Subscription.query.filter_by(user_id=user_id).first()
    return subscription and subscription.end_date >= date.today()


# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
with app.app_context():
    db.create_all()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    get_daily_question()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞


## –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ##

@app.route('/')
def login_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–≤—Ö–æ–¥)"""
    if 'user_id' in session:
        return redirect(url_for('calendar'))
    error = request.args.get('error')  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    return render_template('login.html', error=error)


@app.route('/login', methods=['POST'])
def login():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
    username = request.form['username']
    password = request.form['password']

    if not username or not password:
        return redirect(url_for('login_page', error='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.query.filter_by(username=username, password=password).first()
    if user:
        session['user_id'] = user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
        return redirect(url_for('calendar'))
    else:
        return redirect(url_for('login_page', error='–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞'))


@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.pop('user_id', None)
    return redirect(url_for('login_page'))


@app.route('/register')
def register_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    error = request.args.get('error')
    return render_template('register.html', error=error)


@app.route('/register', methods=['POST'])
def register():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    username = request.form['username']
    password = request.form['password']
    confirm_password = request.form.get('confirm_password', '')

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not username or not password or not confirm_password:
        return redirect(url_for('register_page', error='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'))

    if password != confirm_password:
        return redirect(url_for('register_page', error='–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'))

    password_error = validate_password(password)
    if password_error:
        return redirect(url_for('register_page', error=password_error))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
    if User.query.filter_by(username=username).first():
        return redirect(url_for('register_page', error='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'))

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(username=username, password=password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('login_page', error='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏'))
    except Exception as e:
        db.session.rollback()
        return redirect(url_for('register_page', error='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'))


## –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –∑–∞–ø–∏—Å–∏ ##

@app.route('/calendar', methods=['GET', 'POST'])
def calendar():
    """–ì–ª–∞–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∑–∞–ø–∏—Å—è–º–∏"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']
    today = date.today()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
    year = request.args.get('year', type=int, default=today.year)
    month = request.args.get('month', type=int, default=today.month)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã
    if month > 12:
        month = 1
        year += 1
    elif month < 1:
        month = 12
        year -= 1

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    selected_date_str = request.args.get('date')
    selected_date = today
    if selected_date_str:
        try:
            selected_date = datetime.strptime(selected_date_str, '%Y-%m-%d').date()
        except ValueError:
            selected_date = today

    edit_mode = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if request.method == 'POST':
        if 'date' in request.form:
            selected_date = datetime.strptime(request.form['date'], '%Y-%m-%d').date()

        elif 'save' in request.form:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            selected_date = datetime.strptime(request.form['selected_date'], '%Y-%m-%d').date()
            mood = request.form.get('mood')
            note = request.form.get('note')
            answer = request.form.get('answer')

            if selected_date <= today:  # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
                try:
                    entry = DayEntry.query.filter_by(date=selected_date, user_id=user_id).first()
                    if entry:  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                        entry.mood = mood
                        entry.note = note
                        entry.answer = answer
                        flash('–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success')
                    else:  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                        new_entry = DayEntry(
                            date=selected_date,
                            mood=mood,
                            note=note,
                            answer=answer,
                            user_id=user_id
                        )
                        db.session.add(new_entry)
                        flash('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞', 'success')
                    db.session.commit()
                except IntegrityError:
                    db.session.rollback()
                    flash('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'danger')
                except Exception as e:
                    db.session.rollback()
                    flash(f'–û—à–∏–±–∫–∞: {str(e)}', 'danger')

        elif 'edit' in request.form:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            selected_date = datetime.strptime(request.form['selected_date'], '%Y-%m-%d').date()
            edit_mode = True

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    first_day = date(year, month, 1)
    last_day = date(year, month + 1, 1) if month < 12 else date(year + 1, 1, 1)
    days_in_month = (last_day - first_day).days

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendar_matrix = []
    week = []

    # –ü—É—Å—Ç—ã–µ –¥–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
    for i in range(first_day.weekday()):
        week.append(None)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    for day in range(1, days_in_month + 1):
        current_date = date(year, month, day)
        week.append(current_date)
        if len(week) == 7:  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
            calendar_matrix.append(week)
            week = []

    if week:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        calendar_matrix.append(week)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –º–µ—Å—è—Ü
    month_entries = DayEntry.query.filter(
        DayEntry.user_id == user_id,
        DayEntry.date >= first_day,
        DayEntry.date < last_day
    ).all()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø–∏—Å—è–º –ø–æ –¥–∞—Ç–µ
    entries_dict = {entry.date: entry for entry in month_entries}

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    entry = entries_dict.get(selected_date)
    daily_question = get_daily_question(selected_date)

    return render_template('calendar.html',
                           today=today,
                           selected_date=selected_date,
                           calendar_matrix=calendar_matrix,
                           current_month=MONTH_NAMES[month],
                           current_year=year,
                           prev_month=prev_month,
                           prev_year=prev_year,
                           next_month=next_month,
                           next_year=next_year,
                           entry=entry,
                           daily_question=daily_question,
                           edit_mode=edit_mode,
                           MONTH_NAMES=MONTH_NAMES,
                           entries_dict=entries_dict)


## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç ##

@app.route('/stats')
def stats():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
    mood_stats = db.session.query(
        DayEntry.mood,
        func.count(DayEntry.mood).label('count')
    ).filter_by(user_id=user_id).group_by(DayEntry.mood).all()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    mood_data = {
        'happy': 0,
        'neutral': 0,
        'sad': 0,
        'angry': 0
    }

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for mood, count in mood_stats:
        if mood in mood_data:
            mood_data[mood] = count

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    last_entries = DayEntry.query.filter_by(user_id=user_id).order_by(DayEntry.date.desc()).limit(5).all()

    return render_template('stats.html',
                           mood_data=mood_data,
                           last_entries=last_entries)


@app.route('/diary')
def diary():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏ (–¥–Ω–µ–≤–Ω–∏–∫)"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']
    entries = DayEntry.query.filter_by(user_id=user_id).order_by(DayEntry.date.desc()).all()

    return render_template('diary.html', entries=entries)


@app.route('/export/csv')
def export_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not check_subscription(user_id):
        flash('–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 'danger')
        return redirect(url_for('subscription'))

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        entries = DayEntry.query.filter_by(user_id=user_id).order_by(DayEntry.date).all()

        if not entries:
            flash('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning')
            return redirect(url_for('diary'))

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = {
            '–î–∞—Ç–∞': [entry.date.strftime('%d.%m.%Y') for entry in entries],
            '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ': [get_mood_name(entry.mood) for entry in entries],
            '–ó–∞–ø–∏—Å—å': [entry.note if entry.note else '' for entry in entries],
            '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å': [entry.answer if entry.answer else '' for entry in entries]
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ CSV
        df = pd.DataFrame(data)
        output = io.StringIO()
        df.to_csv(output, index=False, encoding='utf-8-sig', sep=';')
        output.seek(0)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        today_str = date.today().strftime('%Y-%m-%d')
        filename = f'–¥–Ω–µ–≤–Ω–∏–∫_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è_{today_str}.csv'

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        return send_file(
            io.BytesIO(output.getvalue().encode('utf-8-sig')),
            mimetype='text/csv',
            as_attachment=True,
            download_name=filename
        )
    except Exception as e:
        app.logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {str(e)}')
        flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', 'danger')
        return redirect(url_for('diary'))


## –ü–æ–¥–ø–∏—Å–∫–∞ ##

@app.route('/subscription')
def subscription():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']
    current_subscription = Subscription.query.filter_by(user_id=user_id).first()

    return render_template('subscription.html',
                           current_subscription=current_subscription)


@app.route('/subscribe', methods=['POST'])
def subscribe():
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']
    today = date.today()
    end_date = today + timedelta(days=30)  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscription = Subscription.query.filter_by(user_id=user_id).first()

    if subscription:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        subscription.start_date = today
        subscription.end_date = end_date
        subscription.auto_renew = True
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        subscription = Subscription(
            user_id=user_id,
            start_date=today,
            end_date=end_date,
            auto_renew=True
        )
        db.session.add(subscription)

    db.session.commit()
    return redirect(url_for('subscription'))


@app.route('/cancel_subscription', methods=['POST'])
def cancel_subscription():
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user_id = session['user_id']
    subscription = Subscription.query.filter_by(user_id=user_id).first()

    if subscription:
        subscription.auto_renew = False
        db.session.commit()

    return redirect(url_for('subscription'))


## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ##

@app.route('/settings')
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))
    return render_template('settings.html')


@app.route('/menu')
def menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    if 'user_id' not in session:
        return redirect(url_for('login_page'))

    user = User.query.get(session['user_id'])
    if not user:
        return redirect(url_for('login_page'))

    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    current_hour = datetime.now().hour
    if 5 <= current_hour < 12:
        greeting = f"{user.username}, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
    elif 12 <= current_hour < 18:
        greeting = f"{user.username}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!"
    elif 18 <= current_hour < 23:
        greeting = f"{user.username}, –¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
    else:
        greeting = f"{user.username}, –¥–æ–±—Ä–æ–π –Ω–æ—á–∏!"

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dev_message = """
    –î–æ—Ä–æ–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:

    –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–º —Å–∞–π—Ç–æ–º!
    –ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–µ–≥–æ –º–Ω–æ–≥–æ —Å–∏–ª –∏ –¥—É—à–∏. 
    –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å 
    —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏.

    –° –ª—é–±–æ–≤—å—é, –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤üòòüòòüòò.
    """

    return render_template('menu.html',
                           greeting=greeting,
                           dev_message=dev_message)


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(debug=True)
