import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–≤–º–µ—Å—Ç–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
subscribers = set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def monthly_notification():
    for user_id in subscribers:
        try:
            await bot.send_message(
                user_id,
                "üìÖ –≠—Ç–æ –≤–∞—à–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n"
                f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    subscribers.add(user_id)
    await message.reply(
        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ 15-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe
@dp.message(Command('unsubscribe'))
async def process_unsubscribe_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        await message.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.reply("‚Ñπ –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


async def main():
    global bot
    bot = Bot(token=BOT_TOKEN)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (15-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 12:00)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        monthly_notification,
        'cron',
        day=7,
        hour=19,
        minute=18
    )
    scheduler.start()

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())