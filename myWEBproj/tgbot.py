import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
import hashlib

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from werkzeug.security import check_password_hash

from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

router = Router()
dp = Dispatcher()
dp.include_router(router)


class AuthStates(StatesGroup):
    email = State()
    password = State()


class Database:
    def __init__(self, db_name='db/subscribes.db'):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.cursor = self.conn.cursor()

    def verify_password(self, hashed_password, input_password):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–µ–º"""
        return hashed_password == hashlib.sha256(input_password.encode()).hexdigest()

    def get_user_by_email(self, email):
        self.cursor.execute("SELECT id, email, hashed_password, tg_id FROM users WHERE email=?", (email,))
        return self.cursor.fetchone()

    def get_today_subscriptions(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã (1-31)"""
        today = datetime.now()
        tomorrow_day = (today + timedelta(days=1)).day

        self.cursor.execute("""
        SELECT u.tg_id, s.name_serv, s.price, s.payment_date, s.link 
        FROM subscribes s
        JOIN users u ON s.user_id = u.id
        WHERE s.payment_date = ? AND u.tg_id IS NOT NULL
        """, (tomorrow_day,))
        return self.cursor.fetchall()

    def update_telegram_id(self, email, telegram_id):
        """–û–±–Ω–æ–≤–ª—è–µ–º tg_id –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
        try:
            self.cursor.execute(
                "UPDATE users SET tg_id = ? WHERE email = ?",
                (telegram_id, email))
            self.conn.commit()
            return True
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ tg_id: {e}")
            return False

    def close(self):
        self.conn.close()


db = Database()


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    )
    await state.set_state(AuthStates.email)


@router.message(AuthStates.email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    user = db.get_user_by_email(email)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(email=email, user_id=user[0])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.password)


@router.message(AuthStates.password)
async def process_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data['email']
    user = db.get_user_by_email(email)

    if not check_password_hash(user[2], message.text):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if db.update_telegram_id(email, message.from_user.id):
        await message.answer(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö.\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ –¥–µ–Ω—å –¥–æ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –≤ 17:00."
        )
    else:
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


async def send_daily_notifications(bot: Bot):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    subscriptions = db.get_today_subscriptions()

    if not subscriptions:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è")
        return

    current_month = datetime.now().strftime('%m')
    current_year = datetime.now().strftime('%Y')

    for sub in subscriptions:
        tg_id, name_serv, price, payment_day, link = sub

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        try:
            payment_date = datetime.strptime(
                f"{current_year}-{current_month}-{payment_day}",
                "%Y-%m-%d"
            ).strftime('%d.%m.%Y')
        except ValueError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–Ω—è –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è)
            payment_date = f"{payment_day}-–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞"

        message_text = (
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ!\n\n"
            f"üí≥ –°–µ—Ä–≤–∏—Å: {name_serv}\n"
            f"üí∞ –°—É–º–º–∞: {price}\n"
            f"üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {payment_date}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link}\n\n"
            f"–û–ø–ª–∞—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!"
        )

        try:
            await bot.send_message(
                chat_id=tg_id,
                text=message_text
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è tg_id {tg_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è tg_id {tg_id}: {e}")


async def main():
    bot = Bot(token=BOT_TOKEN)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        send_daily_notifications,
        'cron',
        hour=17,
        minute=00,
        args=[bot]
    )
    scheduler.start()

    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    finally:
        db.close()
        await bot.session.close()
        scheduler.shutdown()


if __name__ == '__main__':
    asyncio.run(main())